version: '3.3'
services:
  redis:
    container_name: redis
    restart: always
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - ./volume/redis_data:/data
  auth:
    container_name: auth
    restart: always
    build:
      context: ./auth
      dockerfile: dockerfile
    ports:
      - "8080:5000"
  query_manager:
    container_name: query_manager
    restart: always
    build:
      context: ./query_manager
      dockerfile: dockerfile
    ports:
      - "8082:5000"

  producer:
    container_name: producer
    restart: always
    build:
      context: ./producer
      dockerfile: dockerfile
    ports:
      - "8081:5000"
    depends_on:
      - rabbitmq
  consumer:
    container_name: consumer
    restart: always
    build:
      context: ./consumer
      dockerfile: dockerfile
    depends_on:
      - rabbitmq
      - mysql
    tty: true
    stdin_open: true

  rabbitmq:
    container_name: rabbitmq
    restart: always
    image: rabbitmq:3.8.17-management
    ports:
      - 5672:5672 # RabbitMQ default port
      - 15672:15672 # RabbitMQ management console port
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    volumes:
      - ./volume/rabbitmq_data:/var/lib/rabbitmq # Persist data to local directory

  mongo:
    container_name: mongo
    restart: always
    image: mongo:5.0.4
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=chat-admin
      - MONGO_INITDB_ROOT_PASSWORD=chatchat-admin
    volumes:
      - ./volume/mongo_data:/data/db

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: chatchat-admin
      MYSQL_USER: guest
      MYSQL_PASSWORD: guest
      MYSQL_DATABASE: db
    ports:
      - "3306:3306"
    volumes:
      - ./volume/mysql_data:/var/lib/mysql

  chatbot:
    restart: always
    build:
      context: ./chatbot
      dockerfile: dockerfile
    deploy:
      replicas: 1
    environment:
      - COMPANY_NAME=example

  chatbot-nginx:
    container_name: chatbot-nginx
    restart: always
    image: nginx:latest
    ports:
      - 8090:5000
    volumes:
      - ./chatbot-nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - chatbot

  chatroom-server:
    restart: always
    container_name: chatroom-server
    build:
      context: ./chatroom-server
      dockerfile: dockerfile
    depends_on:
      - mysql
      - query_manager

  chatroom-socket-server:
    restart: always
    build:
      context: ./chatroom-socket-server
      dockerfile: dockerfile
    depends_on:
      - chatroom-server
      - mosquitto
    deploy:
      replicas: 1

  chatroom-nginx:
    container_name: chatroom-nginx
    restart: always
    image: nginx:latest
    ports:
      - 8091:5000
    volumes:
      - ./chatroom-server-nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - chatroom-server
      - chatroom-socket-server
  mosquitto:
    image: eclipse-mosquitto:2.0.15
    restart: always
    container_name: mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    tty: true
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
  # frontend:
  #   image: richli0623/chatroom-frontend:0.10
  #   restart: always
  #   container_name: chatroom-frontend
  #   ports:
  #     - "80:3000"
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    volumes:
      - ./volume/qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"